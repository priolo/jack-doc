"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[418],{5680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>y});var r=n(6540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(n),m=o,y=c["".concat(l,".").concat(m)]||c[m]||u[m]||a;return n?r.createElement(y,s(s({ref:t},d),{},{components:n})):r.createElement(y,s({ref:t},d))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:o,s[1]=i;for(var p=2;p<a;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8491:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=n(8168),o=(n(6540),n(5680));const a={id:"list",title:"List",sidebar_label:"List",sidebar_position:4},s=void 0,i={unversionedId:"list",id:"list",title:"List",description:"Ok! Let's create another CARD with something useful inside.",source:"@site/docs/4-list.md",sourceDirName:".",slug:"/list",permalink:"/jon-doc/docs/list",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"list",title:"List",sidebar_label:"List",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Style",permalink:"/jon-doc/docs/style"},next:{title:"Linked",permalink:"/jon-doc/docs/linked"}},l={},p=[],d={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,o.yg)(c,(0,r.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Ok! Let's create another CARD with something useful inside.",(0,o.yg)("br",{parentName:"p"}),"\n","For example, a list of USERs.",(0,o.yg)("br",{parentName:"p"}),"\n","This time we'll do it outside of ",(0,o.yg)("inlineCode",{parentName:"p"},"App.tsx"),(0,o.yg)("br",{parentName:"p"}),"\n","and in JS to simplify reading.  "),(0,o.yg)("p",null,"First, let's create the SETUP of the STORE.",(0,o.yg)("br",{parentName:"p"}),"\n","We said a simple list of USERs that can be modified:",(0,o.yg)("br",{parentName:"p"}),"\n",(0,o.yg)("inlineCode",{parentName:"p"},"UserListStore.jsx")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="UserListStore.jsx"',title:'"UserListStore.jsx"'},'import { mixStores } from "@priolo/jon"\nimport { viewSetup } from "@priolo/jack"\n\nconst setup = {\n    state: {\n        // all USERs\n        all: [],\n        // the type of card. It will be useful in the `Render` of `CardsGroup`\n        type: "user-list",\n    },\n\n    mutators: {\n        // changes the "all" property and the state of the STORE\n        setAll: (all) => ({ all }),\n    },\n}\n\n// this STORE derives from `viewSetup`\nconst userSetup = mixStores(viewSetup, setup)\n\nexport default userSetup\n')),(0,o.yg)("p",null,"Let's create our React component",(0,o.yg)("br",{parentName:"p"}),"\n",(0,o.yg)("inlineCode",{parentName:"p"},"UsersListCard.jsx")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-jsx",metastring:'title="UsersListCard.jsx"',title:'"UsersListCard.jsx"'},'import { FrameworkCard, Header } from "@priolo/jack"\n\nconst UserListCard = ({\n    // the instance of the STORE derived from the previous setup\n    store,\n}) => {\n    return <FrameworkCard\n        store={store}\n        headerRender={<Header store={store} />}\n    >\n\n        {store.state.all.map(user => (\n            <div>{user.name}</div>\n        ))}\n\n    </FrameworkCard>\n}\n\nexport default UserListCard\n')),(0,o.yg)("p",null,"Finally, the button to insert this card into our DECK",(0,o.yg)("br",{parentName:"p"}),"\n",(0,o.yg)("inlineCode",{parentName:"p"},"App.tsx")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'const App: FunctionComponent = () => {\n\n    // HANDLERS\n    /** insert a new CARD to the DECK of type EXAMPLE */\n    const handleAdd = () => {\n        const view = createStore(cardSetup) as ViewStore\n        deckCardsSo.add({ view })\n    };\n    const handleAddUserList = () => {\n        const view = createStore(userSetup)\n        view.setAll([\n            { name: "Ivano", surname: "Iorio" },\n            { name: "Edoardo", surname: "Iorio" },\n            { name: "Alfredo", surname: "Iorio" },\n        ])\n        deckCardsSo.add({ view })\n    }\n\n    // RENDER\n    return (\n        <div style={cssRoot}>\n\n            <div style={{ display: "flex", flexDirection: "column" }}>\n                <Button onClick={handleAdd}>ADD CARD</Button>\n                <Button onClick={handleAddUserList}>USERS</Button>\n            </div>\n\n            <div style={cssDeck}>\n                <CardsGroup\n                    cardsStore={deckCardsSo}\n                    // based on `view.state.type` of the STORE \n                    // render the correct React CARD\n                    Render={({ view }) => (\n                        {\n                            "user-list": <UserListCard store={view} />,\n                            // "other-type": <OtherComponent store={view} />,\n                            // ...\n                        }[view.state.type] ?? <CardView store={view} /> /* <<= default */\n                    )}\n                />\n            </div>\n\n            <DragCmp />\n\n        </div>\n    )\n}\n')),(0,o.yg)("p",null,"...and that's all... ",(0,o.yg)("a",{parentName:"p",href:"https://codesandbox.io/p/sandbox/04-list-kzcg2s?file=%2Fsrc%2FApp.tsx%3A14%2C4"},"here is the code")))}u.isMDXComponent=!0}}]);